1
00:00:00,012 --> 00:00:05,012
In this video we'll cover a second 
problem to whet your appetite for things 

2
00:00:05,012 --> 00:00:08,487
to come, namely the problem of sequence 
alignment. 

3
00:00:08,487 --> 00:00:12,662
So, this is a fundamental problem in 
computational genomics. 

4
00:00:12,662 --> 00:00:17,737
If you take a class in the subject, it's 
very likely to occupy the very first 

5
00:00:17,737 --> 00:00:21,892
couple of lectures So in this problem 
you're given two strings over an 

6
00:00:21,892 --> 00:00:26,082
alphabet, and no prizes for guessing 
which is the alphabet we're most likely 

7
00:00:26,082 --> 00:00:28,802
to care about. 
Typically these strings represent 

8
00:00:28,802 --> 00:00:32,717
portions of one or more genomes. 
And just as a toy-running example, you 

9
00:00:32,717 --> 00:00:37,440
can imagine that the two strings we're 
given are AGGGCT and AGGCA. 

10
00:00:37,440 --> 00:00:42,318
Note that the 2 input strings do not 
necessarily need to be of the same 

11
00:00:42,318 --> 00:00:45,441
length. 
Informally speaking the goal of the 

12
00:00:45,441 --> 00:00:50,660
sequence 1 at problem is to figure out 
how similar the 2 input strings are. 

13
00:00:50,660 --> 00:00:55,434
Obviously I haven't told you what I mean 
by 2 strings being similar. 

14
00:00:55,434 --> 00:00:59,641
That's something would develop. 
Over the next couple of slides. 

15
00:00:59,641 --> 00:01:04,019
Why might you want to solve this problem? 
Well there's actually a lot of reasons, 

16
00:01:04,019 --> 00:01:06,275
let me just give you two of many 
examples. 

17
00:01:06,275 --> 00:01:10,569
One would be to conjecture the function 
of the regions of a genome that you don't 

18
00:01:10,569 --> 00:01:14,493
understand like say the human genome, 
from similar regions that exist in 

19
00:01:14,493 --> 00:01:18,535
genome's that you do understand or at 
least understand better say the mouse 

20
00:01:18,535 --> 00:01:20,911
genome. 
If you see a string that has a known 

21
00:01:20,911 --> 00:01:24,890
function in the well understood genome 
and you see something similar in the 

22
00:01:24,890 --> 00:01:28,728
poorly understood genome you might 
conjecture it has the same or similar 

23
00:01:28,728 --> 00:01:31,505
function. 
A totally different reason you might want 

24
00:01:31,505 --> 00:01:35,509
to compare the genomes of two different 
species is to figure out whether one 

25
00:01:35,509 --> 00:01:38,017
evolved directly from the other. 
And when. 

26
00:01:38,017 --> 00:01:41,942
A second totally different reason you 
might want to compare the genomes of two 

27
00:01:41,942 --> 00:01:45,467
different species is to understand there 
evolutionary relationship. 

28
00:01:45,467 --> 00:01:49,332
So for example maybe you have three 
species A,B, and C and you're wondering, 

29
00:01:49,332 --> 00:01:53,259
whether if B evolved from A, and if C 
evolved from B, or whether B and C 

30
00:01:53,259 --> 00:01:56,206
evolved independently from a common 
ancestor A. 

31
00:01:56,206 --> 00:02:00,936
And then you might take genome seril-, 
similarity as a measure of proximity in 

32
00:02:00,936 --> 00:02:04,871
the evolutionary tree. 
So having motivated the informal version 

33
00:02:04,871 --> 00:02:08,320
of the problem, let's work toward making 
it more formal. 

34
00:02:08,320 --> 00:02:13,352
In particular, I owe you a discussion of 
what I mean by two strings being similar. 

35
00:02:13,352 --> 00:02:18,666
[INAUDIBLE] So to develop intuition for 
this, let's revisit the two strings that 

36
00:02:18,666 --> 00:02:22,201
we introduced on the previous slide 
AGGGCT and AGGCA. 

37
00:02:22,201 --> 00:02:27,371
Now, if we just sort of eyeball these two 
strings, I mean clearly they're not the 

38
00:02:27,371 --> 00:02:32,199
same string, but, we somehow feel like 
they're more similar than they are 

39
00:02:32,199 --> 00:02:33,922
different. 
Different. 

40
00:02:33,922 --> 00:02:39,211
So where does that intuition come from? 
Well one way to make it more precise is 

41
00:02:39,211 --> 00:02:44,526
to notice that these two strings can be 
nicely aligned in the following sense. 

42
00:02:44,526 --> 00:02:47,831
Let's write down the longer string, 
AGGGCT. 

43
00:02:47,831 --> 00:02:52,540
And I'm going to write the shorter string 
under it and I'll insert a gap, a space 

44
00:02:52,540 --> 00:02:55,306
to make the two strings have the same 
length. 

45
00:02:55,306 --> 00:02:59,786
I'm going to put the space where there 
seems to be a quote unquote missing g. 

46
00:02:59,786 --> 00:03:04,334
And in what sense is this a nice 
alignment? Well it's clearly not perfect. 

47
00:03:04,334 --> 00:03:09,129
We don't get a character by character 
match of the two strings but there's only 

48
00:03:09,129 --> 00:03:12,622
two minor flaws. 
So on the one hand we did have to insert 

49
00:03:12,622 --> 00:03:15,886
Big gap. 
And we do have to suffer one mismatch in 

50
00:03:15,886 --> 00:03:19,683
the final column. 
So this intuition motivates defining 

51
00:03:19,683 --> 00:03:24,518
similarity between two strings, with 
respect to their highest quality 

52
00:03:24,518 --> 00:03:29,088
alignment, their nicest alignment. 
So we are getting closer to a formal 

53
00:03:29,088 --> 00:03:32,769
problem statement, but it's still 
somewhat under-determined. 

54
00:03:32,769 --> 00:03:37,521
Specifically we need to make precise why 
we might compare, why we might prefer one 

55
00:03:37,521 --> 00:03:41,238
alignment over another. 
For example, is it better to have three 

56
00:03:41,238 --> 00:03:46,087
gaps and no mix-matches Was it better to 
have one gap and one mismatch? So for 

57
00:03:46,087 --> 00:03:50,027
this video, we're effectively going to 
punt on this question. 

58
00:03:50,027 --> 00:03:54,852
We're going to assume this problem's 
already been solved experimentally, that 

59
00:03:54,852 --> 00:03:59,522
it's known and provided as part of the 
input, which is more costly gaps and 

60
00:03:59,522 --> 00:04:03,627
various types of mismatches. 
So here then, is the formal problem 

61
00:04:03,627 --> 00:04:06,995
statement. 
So in addition to the two strings over A, 

62
00:04:06,995 --> 00:04:11,847
C, G, T we are provided as part of the 
input a non negative number indicating 

63
00:04:11,847 --> 00:04:15,580
the cost we incur in alignment for each 
gap that we insert. 

64
00:04:15,580 --> 00:04:20,186
Similarly for each possible mismatch of 
two characters like for example 

65
00:04:20,186 --> 00:04:24,654
mismatching an A and T we're given as 
part of the input a corresponding 

66
00:04:24,654 --> 00:04:28,507
penalty. 
Given this input, the responsibility of a 

67
00:04:28,507 --> 00:04:34,421
sequence alignment algorithm is to output 
the alignment that minimizes the sum of 

68
00:04:34,421 --> 00:04:38,447
the penalties. 
Another way to think of this output, the 

69
00:04:38,447 --> 00:04:43,406
minimum penalty alignment is we're trying 
to find in effect the minimum cost 

70
00:04:43,406 --> 00:04:47,724
explanation for how one of these strings 
would have turned into the other. 

71
00:04:47,724 --> 00:04:52,142
So we can think of a gap as undoing a 
deletion that occurred in the past and we 

72
00:04:52,142 --> 00:04:55,144
can think of a misbatch as representing a 
mutation. 

73
00:04:55,144 --> 00:04:59,487
So this minimum possible total penalty. 
That is, the value of this optimal 

74
00:04:59,487 --> 00:05:03,869
alignment is famous and fundamental 
enough to have its own name, namely the 

75
00:05:03,869 --> 00:05:07,748
Needleman-Wunsch score. 
So, this quantity is named after the two 

76
00:05:07,748 --> 00:05:12,177
authors that proposed efficient algorithm 
for computing the optimal alignment. 

77
00:05:12,177 --> 00:05:15,776
That appeared way back in 1970, in the 
Journal of Molecular Biology. 

78
00:05:15,776 --> 00:05:19,450
And now, at last, we have a formal 
definition for what it means for two 

79
00:05:19,450 --> 00:05:22,618
strings to be similar. 
It means they have a small NW score, a 

80
00:05:22,618 --> 00:05:25,836
score close to zero. 
So, for example, if you had, have a data 

81
00:05:25,836 --> 00:05:29,777
base with a whole bunch of genome 
fragments, according to this you're going 

82
00:05:29,777 --> 00:05:35,163
to define the most similar fragment to be 
those with the smallest NW score. 

83
00:05:35,163 --> 00:05:41,887
So to bring the discussion back squarely 
into the land of algorithms, let me point 

84
00:05:41,887 --> 00:05:48,300
out that this definition of genome 
similarity is intrinsically algorithmic. 

85
00:05:48,300 --> 00:05:53,804
This definition would be totally useless, 
unless There existed an efficient 

86
00:05:53,804 --> 00:05:57,423
algorithm that, given two strings in 
these penalties, computes the best 

87
00:05:57,423 --> 00:06:01,204
alignment between those two strings. 
If you couldn't compute this score you 

88
00:06:01,204 --> 00:06:03,506
would never use it as a measure of 
similarity. 

89
00:06:03,506 --> 00:06:07,877
So this observation puts us under a lot 
of pressure to devise an efficient 

90
00:06:07,877 --> 00:06:11,758
algorithm for finding the best alignment. 
So how are we going to do that? Well we 

91
00:06:11,758 --> 00:06:15,614
could always fall back to brute-force 
search, where we iterate over all of the 

92
00:06:15,614 --> 00:06:18,182
conceivable alignments of the two 
strings. 

93
00:06:18,182 --> 00:06:22,052
Compute the total penalty of each of 
those alignments, and remember the best 

94
00:06:22,052 --> 00:06:24,392
one. 
Clearly correctness is not going to be an 

95
00:06:24,392 --> 00:06:28,292
issue for group brute-force search, it's 
correct essentially by definition. 

96
00:06:28,292 --> 00:06:32,017
The issue is how long does it take. 
So let's ask a simpler question, let's 

97
00:06:32,017 --> 00:06:35,397
just thing about how many different 
alignments there are, how many 

98
00:06:35,397 --> 00:06:39,661
possibilities do we have to try? So if 
you're going to create lengths imagine if 

99
00:06:39,661 --> 00:06:43,421
I gave you two strings of length 500, 
which is a not unreasonable length. 

100
00:06:43,421 --> 00:06:46,888
Which of the following English phrases 
best describes the number of 

101
00:06:46,888 --> 00:06:51,112
possibilities, the number of alignments 
given to strings of 500 characters each? 

102
00:06:51,112 --> 00:06:58,247
So I realize this is sort of a cheeky 
question but I hope you can gather that 

103
00:06:58,247 --> 00:07:05,482
what I was looking for was part D. 
So you know, so how big are each of these 

104
00:07:05,482 --> 00:07:11,257
quantities anyways. 
Well in a typical version of this class 

105
00:07:11,257 --> 00:07:16,562
you might have about 50,000 students 
enrolled or so. 

106
00:07:16,562 --> 00:07:22,490
So its somewhere between 10^4 and 10^5. 
The number of people on earth is roughly 

107
00:07:22,490 --> 00:07:26,583
7 billion, so that's somewhere between 
10^9 and 10^10. 

108
00:07:26,583 --> 00:07:31,842
The most common estimate I see for known 
atoms in the universe is 10^8. 

109
00:07:31,842 --> 00:07:34,517
80. 
And believe it or not, the number of 

110
00:07:34,517 --> 00:07:39,517
possible alignments of two strings of 
length 500 is even bigger than that. 

111
00:07:39,517 --> 00:07:44,742
So I'll leave it for you to convince 
yourself that the number of possibilities 

112
00:07:44,742 --> 00:07:49,023
is at least 2^500. 
the real number is actually, noticeably 

113
00:07:49,023 --> 00:07:52,575
bigger than that. 
and because 10 is at most 2^4, we can 

114
00:07:52,575 --> 00:07:57,142
lower bound this number by 10^125. 
quite a bit bigger than the number of 

115
00:07:57,142 --> 00:08:01,142
atoms in the universe. 
And, the point, of course, is just that. 

116
00:08:01,142 --> 00:08:05,100
It's utterly absurd to envision 
implementing brute-force search, even at 

117
00:08:05,100 --> 00:08:09,562
a scale of a few hundred characters. 
And you know, forgetting about these sort 

118
00:08:09,562 --> 00:08:13,831
of astronomical if you will comparisons 
even if you had string lengths much 

119
00:08:13,831 --> 00:08:17,116
smaller say in the. 
The, you know, a dozen or two you'd never 

120
00:08:17,116 --> 00:08:20,880
ever run brute-force it's just not going 
to work, and a course notice this is not 

121
00:08:20,880 --> 00:08:24,463
the kind of problem this [UNKNOWN] 
explosion, this doesn't go away if you 

122
00:08:24,463 --> 00:08:26,805
wait a little while for Moore's law to 
help you. 

123
00:08:26,805 --> 00:08:30,363
This is a fundemental limitation that 
say; you are never going to compute 

124
00:08:30,363 --> 00:08:32,852
alignments of the strings that you care 
about. 

125
00:08:32,852 --> 00:08:37,901
Unless you have a fast, clever algorithm. 
I'm happy to report that you will indeed 

126
00:08:37,901 --> 00:08:41,762
learn such a fast and clever algorithm 
later on in this course. 

127
00:08:41,762 --> 00:08:46,464
Even better, it's just going to be a 
straightforward instantiation of a much 

128
00:08:46,464 --> 00:08:50,714
more general algorithm design paradigm 
that of dynamic programming. 

