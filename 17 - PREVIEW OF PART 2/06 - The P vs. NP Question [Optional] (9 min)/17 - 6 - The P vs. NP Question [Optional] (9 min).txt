So I hope that pretty much all of you had 
heard about the P vs. 
NP question before you enrolled in this 
class. 
But if you haven't you can pretty much 
guess what that question is. 
I've defined for you both of these 
classes of problems. 
P is the class of problems that are 
polynomial time solvable Whereas the 
problems in NP have the property that, at 
least given a solution, you can quickly 
verify that it is indeed a correct 
solution. 
It's widely conjectured that P is not 
equal to NP, that is, merely the ability 
to efficiently verify purported 
solutions, is not sufficient to 
guarantee. 
Polynomial time solvability. 
Indeed, Edmunds, back in 1965, before we 
even had the vocabulary in P. 
Remember, that came along only in '71. 
Edmunds, already, in '65, was essentially 
conjecturing that p is not = to np. 
In the form that he was conjecturing, 
there's no polynomial time algorithm that 
solves the traveling salesman problem. 
. 
But, let me emphasize. 
We genuinely do not know the answer to 
this question. 
There is no proof of this conjecture. 
. 
P vs. 
NP question is arguably the open question 
in computer science. 
It's also certainly one of the most 
important and deepest open questions in 
all of mathematics. 
For example, in 2000 The Clay Mathematics 
Institute published a list of seven 
millenium prize problems. 
The P vs. 
NP question is one of those seven 
problems. 
All of these problems are extremely 
difficult and extremely important. 
The only one that's been solve to date is 
the Poincar√© conjecture, the Riemann 
hypothesis is another example on that 
list. 
And they're not called the millennium 
prize problems for nothing. If you solve 
one of these mathematical problems, you 
get a cash prize or $1 million. 
Now, while $1 million is obviously 
nothing to sneeze at, I think it sort of 
understates the importance of a 
mathematical question like, P vs NP. 
And the advance in our knowledge that a 
solution to the question would provide,I 
think would be much more significant than 
a price check. 
So how come so many people think that P 
is not equal to NP, rather than the 
opposite that P = NP. 
Well I think the dominant reason is a 
psychological reason, mainly that if it 
were the case that P = NP, than all you'd 
have to do to remember is exibit. 
A polynomial time algorithm for just one 
NP complete problem. 
And, there are tons of NP complete 
problems. 
And a lot of extremely smart people have 
had NP complete problems that they've 
really cared about, and either on purpose 
or accidentally, they've been trying to 
develop efficient algorithms for them. 
No one has ever succeded in over a half 
century of serious computational. 
Work. 
The second reason is sort of 
philosophical. 
P = NP just doesn't seem to jive with the 
way the world works. 
Think about, for example, when you do a 
homework problem in a class like this 
one, and consider three different tasks. 
The first task is I give you. 
A question, and I ask you to come up with 
a correct solution, say a proof, of some 
mathematical statement. 
The second task would be just grade 
somebody else's suggested proof. 
Well, generally, it seems a lot harder to 
actually come up with. 
With a correct argument from scratch, 
compared to just verifying a correct 
solution provided by somebody else. 
And yet P = NP would be saying that these 
2 tasks have exactly the same complexity. 
It's just as easy to solve homework 
problems as it is to just read and verify 
the correct solutions. 
So I don't know about you, but it's 
always seemed to me to be a lot harder to 
come up with a mathematical argument from 
scratch, as opposed to simply grading 
somebody else's solution. 
Somehow it seems to require a degree of 
creativity to pluck out from this 
exponentially big space of proofs, a 
correct one for the statement at hand. 
Yet P=NP would suggest that that 
creativity. 
Could be efficiently automated. 
But, of course, you know, P vs. 
NP being a mathematical question. 
We'd really like some mathematical 
evidence of which way it goes. 
For example, that p is not = to np. 
And here, we really know shockingly 
little. 
There just isn't that much concrete 
evidence at this point. 
That, for example, p is not = to np. 
Now maybe it seems bizarre to you that 
we're struggling to prove that P is not 
equal to NP. 
Maybe it just seems sort of obvious that 
there's no way that you can always 
construct proofs in time polynomial in 
what you need to verify proofs. 
But, the reason this is so hard to prove 
mathmatically, is because of the insane 
richness of the space of Polynomial time 
algorithms. 
And indeed it's this richness that we've 
been exploiting all along in these design 
and analysis of algorithms classes. 
Think, for example, about matrix 
multiplication. 
Had I not shown you Strassen's algorithm, 
I probably could have convinced you more 
or less that there was no way to solve 
matrix multiplication faster than cubic 
time. 
You just look at the definition of the 
problem and it seems like you have to do 
cubic work. 
Yet, Strassen's algorithm and other 
follow up show you can do fundamentally 
better than the naive cubic running time 
algorithm for matrix multiplication. 
So there really are some quite counter 
intuitive and hard to discover unusually 
efficient algorithms with in the 
landscape of polynomial time solutions. 
And who's to say that there aren't some 
more exotic species in this landscape of 
polynomial time solvability that have yet 
to be discovered, which can make any. 
Roads even on NP complete problem. 
At this point we really don't know, and 
the very least are currently primitive 
understanding of the fauna within the 
complexity class p is an intimidating 
obstruction to a proof that p is not 
equal Equal to NP. 
I should also mention that as an 
interesting counterpoint to Edmond's 
Conjecture in '65, was a conjecture by 
Godel. 
This is the same logician Kurt Godel, of 
Godel's Completeness and Incompleteness 
theorems. 
He wrote a letter to John von Neumann in 
1956, where he actually conjectured the 
opposite. 
That P = NP, so who knows? So I've tried 
to highlight for you the most important 
things that an algorithm designer and 
serious programmer should know about NP 
problems and NP completeness. 
One thing I haven't explained which you 
might be wondering about is, what on 
earth does NP stand for? Anyways. 
A common guess would be not polynomial, 
but this is not what it stands for. 
The answer's going to be a little more 
obscured, and indeed it to a bit of an 
anachronism; non deterministic 
polynomial. 
So this is referring to a different but 
mathematically equivalent way to define 
the complexity class NP in terms of an 
abstract machine model known as 
non-deterministic turning machines. 
But generally for somebody's who's 
thinking about algorithms it's generally 
for the programmer. 
I would advise against thinking about 
problems in NP in terms of this original 
definition with this abstract machine 
model. 
And I'd instead strongly encourage you to 
think about the definition I gave you, in 
terms of the efficient recognition, the 
efficient verification of purported 
solutions. 
Again, they're mathematically equivalent 
and I think efficient verification makes 
more sense to the. 
The algorithm designer. 
. 
Maybe you're thinking that NP is, 
perhaps, not that good in somewhat 
inscrutable definition for what's a super 
important concept. 
but it's not for lack of discussion and 
effort on the community's part. 
So very soon after the work of Cook and 
Carp. 
It was clear to everybody working in the 
west on algorithms and computation, that 
this was a super important concept. 
And people needed to straighten out the 
vocabulary asap. 
So Don Knuth ran a poll amongst members 
of the community. 
He reported on the results in his SIGACT 
news article from 1974, a Terminological 
Proposal. 
And NP completeness was the winner. 
And that was then adopted in the landmark 
book, Design and Analysis of Algorithms 
by Aho, Hopcroft, and Ullman. 
And that's the way it's been ever since. 
There is one suggestion that was passed 
over, which I find quite amusing, let me 
tell you about. 
The suggestion was PET. So, what is PET 
an acronym for? Well, it's flexible. 
So, initially, the interpretation would 
be Possibly Exponential Time Problem. 
Now, suppose if some day people that P is 
not equal to NP, then the meaning would 
change to Provably Exponential Time. 
So its not the time to nit pick with the 
suggestion that you could prove P not 
equal to NP without actually proving an 
exponential lower bound, merely a super 
polynomial bound. 
Lets leave objections like that aside and 
ask, what would happen if P actually 
turned out to be equal to NP? 
Well then you could call PET, Previously 
Exponential Time problems. 
But of course at this point, PET is 
nothing more than an amusing historical 
footnote. 
NP complete is the phrase that you gotta 
know. 

